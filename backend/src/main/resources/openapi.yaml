openapi: 3.0.0
info:
  title: PrepVerse API
  description: API documentation for the PrepVerse application
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local server
paths:
  /api/contests:
    get:
      summary: Get all contests
      responses:
        '200':
          description: A list of contests
    post:
      summary: Create a new contest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contest'
      responses:
        '200':
          description: The created contest
  /api/contests/{id}:
    get:
      summary: Get a contest by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The contest
    put:
      summary: Update an existing contest
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contest'
      responses:
        '200':
          description: The updated contest
    delete:
      summary: Delete a contest
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No content
  /api/contests/{contestId}/submit/{userId}:
    post:
      summary: Submit a user's score for a contest
      parameters:
        - name: contestId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: score
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The user's contest result
  /api/contests/results/user/{userId}:
    get:
      summary: Get a user's contest results
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200
':
          description: A list of the user's contest results
  /api/courses:
    get:
      summary: Get all courses
      responses:
        '200':
          description: A list of courses
    post:
      summary: Create a new course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '200':
          description: The created course
  /api/courses/{id}:
    get:
      summary: Get a course by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The course
    put:
      summary: Update an existing course
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '200':
          description: The updated course
    delete:
      summary: Delete a course
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No content
  /api/courses/{courseId}/enroll/{userId}:
    post:
      summary: Enroll a user in a course
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The course the user was enrolled in
  /api/courses/{courseId}/unenroll/{userId}:
    delete:
      summary: Remove a user from a course
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The course the user was unenrolled from
/api/dashboard/user/{userId}:
    get:
      summary: Get dashboard data for a specific user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Dashboard data for the user
  /api/mocktests:
    get:
      summary: Get all mock tests
      responses:
        '200':
          description: A list of mock tests
    post:
      summary: Create a new mock test
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MockTest'
      responses:
        '200':
          description: The created mock test
  /api/mocktests/{id}:
    get:
      summary: Get a mock test by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The mock test
    put:
      summary: Update an existing mock test
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MockTest'
      responses:
        '200':
          description: The updated mock test
    delete:
      summary: Delete a mock test
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No content
  /api/mocktests/{mockTestId}/submit/{userId}:
    post:
      summary: Submit a user's mock test results
      parameters:
        - name: mockTestId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: score
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: timeTakenInMinutes
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The user's mock test result
  /api/mocktests/results/user/{userId}:
    get:
      summary: Get a user's mock test results
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A list of the user's mock test results
  /api/notes:
    get:
      summary: Get all notes
      responses:
        '200':
          description: A list of notes
    post:
      summary: Create a new note
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
      responses:
        '200':
          description: The created note
  /api/notes/{id}:
    get:
      summary: Get a note by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The note
    put:
      summary: Update an existing note
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
      responses:
        '200':
          description: The updated note
    delete:
      summary: Delete a note
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No content
  /api/notes/user/{userId}:
    get:
      summary: Get all notes for a specific user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A list of the user's notes
  /api/notes/question/{questionId}:
    get:
      summary: Get all notes for a specific question
      parameters:
        - name: questionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A list of notes for the question
  /api/planner:
    get:
      summary: Get all planner tasks
      responses:
        '200':
          description: A list of planner tasks
    post:
      summary: Create a new planner task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlannerTask'
      responses:
        '200':
          description: The created planner task
  /api/planner/{id}:
    get:
      summary: Get a planner task by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The planner task
    put:
      summary: Update an existing planner task
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlannerTask'
      responses:
        '200':
          description: The updated planner task
    delete:
      summary: Delete a planner task
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No content
  /api/planner/user/{userId}:
    get:
      summary: Get all planner tasks for a specific user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A list of the user's planner tasks
  /api/questions:
    get:
      summary: Get all questions
      responses:
        '200':
          description: A list of questions
  /api/users:
    get:
      summary: Get all users
      responses:
        '200':
          description: A list of users
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The created user
  /api/users/{id}:
    get:
      summary: Get a user by their ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The user
    put:
      summary: Update an existing user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The updated user
    delete:
      summary: Delete a user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No content
components:
  schemas:
    Contest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
    Course:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
    MockTest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        durationInMinutes:
          type: integer
          format: int32
    Note:
      type: object
      properties:
        id:
          type: integer
          format: int64
        content:
          type: string
    PlannerTask:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
    Question:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        difficulty:
          type: string
        topic:
          type: string
